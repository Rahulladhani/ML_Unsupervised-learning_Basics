# -*- coding: utf-8 -*-
"""hierarchical_clustering.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1J4vFi2IQucoRIkAfhcqU1w8ROIgcXWaz

#Hierarchical Clustering for Customer Segmentation.

## Importing the libraries
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

"""* NumPy for numerical computations.
* Matplotlib for data visualization.
* Pandas for dataset handling.

## Importing the dataset
"""

dataset = pd.read_csv("Mall_Customers.csv")
X = dataset.iloc[:,[3,4]].values

"""*   The dataset (Mall_Customers.csv) is loaded using Pandas.
*   Relevant columns (Annual Income and Spending Score) are selected to form the feature matrix X

## Using the dendrogram to find the optimal number of clusters
"""

import scipy.cluster.hierarchy as sch
dendrogram = sch.dendrogram(sch.linkage(X, method = 'ward'))
plt.title('Dendrogram')
plt.xlabel('Customers')
plt.ylabel('Euclidean distance')
plt.show()

"""*   Hierarchical clustering with Ward's linkage method is employed.
*  A dendrogram is plotted to visualize the clustering structure and determine the optimal number of clusters based on Euclidean distances.

## Training the Hierarchical Clustering model on the dataset
"""

from sklearn.cluster import AgglomerativeClustering
hc = AgglomerativeClustering(n_clusters = 5, affinity = 'euclidean', linkage = 'ward')
y_hc = hc.fit_predict(X)

"""*   An AgglomerativeClustering model is instantiated with five clusters.
*   Euclidean distance metric and Ward's linkage method are used for clustering.

## Visualising the clusters
"""

plt.scatter(X[y_hc == 0, 0], X[y_hc == 0 ,1], s = 100, c = 'red' , label ='Cluster 1 ')
plt.scatter(X[y_hc == 1, 0], X[y_hc == 1, 1], s = 100, c = 'blue', label = 'Cluster 2')
plt.scatter(X[y_hc == 2, 0], X[y_hc == 2, 1], s = 100, c = 'green', label = 'Cluster 3')
plt.scatter(X[y_hc == 3, 0], X[y_hc == 3, 1], s = 100, c = 'cyan', label = 'Cluster 4')
plt.scatter(X[y_hc == 4, 0], X[y_hc == 4, 1], s = 100, c = 'magenta', label = 'Cluster 5')
plt.title('Clusters of customers')
plt.xlabel('Annual Income (k$)')
plt.ylabel('Spending Score (1-100)')
plt.legend()
plt.show()

"""*   Clusters are visualized on a scatter plot.
*  Each cluster is represented by a distinct color.
*  The scatter plot displays customers' annual income on the x-axis and spending score on the y-axis.
*  Data points are colored according to their assigned cluster labels.

**Result:**


*   The clustering model successfully segments customers into distinct groups based on their shopping behaviors, providing valuable insights for targeted marketing strategies and personalized customer engagement.
"""

